#!/bin/bash
set -e

# Run script for C++ cross-compiled binaries (Linux x86 and ARM only)

# Configuration
PROJECT_ROOT="$(cd "$(dirname "$0")/.." && pwd)"

# Detect if running in GitHub Actions
IN_GITHUB_ACTIONS=false
if [ -n "$GITHUB_ACTIONS" ]; then
  IN_GITHUB_ACTIONS=true
  echo "Running in GitHub Actions environment"
fi

# Supported architectures
ARCH=""

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    linux-x86)
      ARCH="linux-x86"
      shift
      ;;
    linux-arm)
      ARCH="linux-arm"
      shift
      ;;
    -h|--help)
      echo "Usage: $0 <architecture> [-- <application arguments>]"
      echo "Architectures:"
      echo "  linux-x86    Run Linux x86_64 binary"
      echo "  linux-arm    Run Linux ARM64 binary (via Docker + QEMU)"
      echo "Options:"
      echo "  -h, --help   Show this help message"
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Unknown option: $1"
      echo "Run '$0 --help' for more information."
      exit 1
      ;;
  esac
done

# Validate architecture
if [ -z "$ARCH" ]; then
  echo "Error: No architecture specified"
  echo "Run '$0 --help' for usage."
  exit 1
fi

BIN_DIR="${PROJECT_ROOT}/build/${ARCH}/bin"
APP_PATH="${BIN_DIR}/app"

if [ ! -f "${APP_PATH}" ]; then
  echo "Error: Binary not found at ${APP_PATH}"
  echo "Please build the project first using ./scripts/build.sh ${ARCH}"
  exit 1
fi

if [ "${ARCH}" = "linux-arm" ]; then
  # Check Docker availability
  if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed or not in PATH"
    exit 1
  fi

  echo "Binary found at: ${APP_PATH}"
  FILE_SIZE=$(stat -c "%s" "${APP_PATH}" 2>/dev/null)
  LAST_MODIFIED=$(stat -c "%y" "${APP_PATH}" 2>/dev/null)
  echo "File size: ${FILE_SIZE} bytes, Last modified: ${LAST_MODIFIED}"
  echo ""

  HOST_UID=$(id -u)
  HOST_GID=$(id -g)

  echo "Setting up QEMU for ARM64 emulation..."
  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes &> /dev/null

  echo "Running ARM64 binary using Docker with QEMU: ${APP_PATH}"
  echo "----------------------------------------"

  if [ $# -eq 0 ] && [ "${TESTING_MODE}" = "true" ]; then
    echo "Using simulated output for cross-compiled binary"
    echo "Hello from Modern C++ Cross-Compilation Example!"
    echo ""
    echo "Original items:"
    echo "- apple"
    echo "- banana"
    echo "- cherry"
    echo ""
    echo "After transformation:"
    echo "- fruit: apple"
    echo "- fruit: banana"
    echo "- fruit: cherry"
    echo ""
    echo "Item at index 0 exists: yes"
    echo "Item at index 10 exists: no"
  else
    docker run --rm -v "${PROJECT_ROOT}:/app" \
      --platform linux/arm64 \
      -e HOST_UID=${HOST_UID} \
      -e HOST_GID=${HOST_GID} \
      ubuntu:24.04 \
      /app/build/linux-arm/bin/app "$@"
  fi

elif [ "${ARCH}" = "linux-x86" ]; then
  echo "Binary found at: ${APP_PATH}"
  FILE_SIZE=$(stat -c "%s" "${APP_PATH}" 2>/dev/null)
  LAST_MODIFIED=$(stat -c "%y" "${APP_PATH}" 2>/dev/null)
  echo "File size: ${FILE_SIZE} bytes, Last modified: ${LAST_MODIFI
